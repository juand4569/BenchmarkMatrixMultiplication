# JMH version: 1.35
# VM version: JDK 21.0.5, OpenJDK 64-Bit Server VM, 21.0.5+13-b509.30
# VM invoker: C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\jbr\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\lib\idea_rt.jar=51345:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: ulpgc.bd.MatrixMultiplicationBenchmarking.classExact
# Parameters: (n = 128)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 9,789 ms/op
# Warmup Iteration   2: 2,304 ms/op
# Warmup Iteration   3: 2,330 ms/op
Iteration   1: 2,374 ms/op
Iteration   2: 1,754 ms/op
Iteration   3: 2,272 ms/op
Iteration   4: 1,835 ms/op
Iteration   5: 1,769 ms/op


Result "ulpgc.bd.MatrixMultiplicationBenchmarking.classExact":
  N = 5
  mean =      2,001 ±(99.9%) 1,147 ms/op

  Histogram, ms/op:
    [1,700, 1,750) = 0 
    [1,750, 1,800) = 2 
    [1,800, 1,850) = 1 
    [1,850, 1,900) = 0 
    [1,900, 1,950) = 0 
    [1,950, 2,000) = 0 
    [2,000, 2,050) = 0 
    [2,050, 2,100) = 0 
    [2,100, 2,150) = 0 
    [2,150, 2,200) = 0 
    [2,200, 2,250) = 0 
    [2,250, 2,300) = 1 
    [2,300, 2,350) = 0 
    [2,350, 2,400) = 1 

  Percentiles, ms/op:
      p(0,0000) =      1,754 ms/op
     p(50,0000) =      1,835 ms/op
     p(90,0000) =      2,374 ms/op
     p(95,0000) =      2,374 ms/op
     p(99,0000) =      2,374 ms/op
     p(99,9000) =      2,374 ms/op
     p(99,9900) =      2,374 ms/op
     p(99,9990) =      2,374 ms/op
     p(99,9999) =      2,374 ms/op
    p(100,0000) =      2,374 ms/op


# JMH version: 1.35
# VM version: JDK 21.0.5, OpenJDK 64-Bit Server VM, 21.0.5+13-b509.30
# VM invoker: C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\jbr\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\lib\idea_rt.jar=51345:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: ulpgc.bd.MatrixMultiplicationBenchmarking.classExact
# Parameters: (n = 256)

# Run progress: 25,00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 24,200 ms/op
# Warmup Iteration   2: 14,722 ms/op
# Warmup Iteration   3: 14,332 ms/op
Iteration   1: 14,369 ms/op
Iteration   2: 14,033 ms/op
Iteration   3: 14,416 ms/op
Iteration   4: 14,399 ms/op
Iteration   5: 14,270 ms/op


Result "ulpgc.bd.MatrixMultiplicationBenchmarking.classExact":
  N = 5
  mean =     14,297 ±(99.9%) 0,609 ms/op

  Histogram, ms/op:
    [14,000, 14,050) = 1 
    [14,050, 14,100) = 0 
    [14,100, 14,150) = 0 
    [14,150, 14,200) = 0 
    [14,200, 14,250) = 0 
    [14,250, 14,300) = 1 
    [14,300, 14,350) = 0 
    [14,350, 14,400) = 2 
    [14,400, 14,450) = 1 

  Percentiles, ms/op:
      p(0,0000) =     14,033 ms/op
     p(50,0000) =     14,369 ms/op
     p(90,0000) =     14,416 ms/op
     p(95,0000) =     14,416 ms/op
     p(99,0000) =     14,416 ms/op
     p(99,9000) =     14,416 ms/op
     p(99,9900) =     14,416 ms/op
     p(99,9990) =     14,416 ms/op
     p(99,9999) =     14,416 ms/op
    p(100,0000) =     14,416 ms/op


# JMH version: 1.35
# VM version: JDK 21.0.5, OpenJDK 64-Bit Server VM, 21.0.5+13-b509.30
# VM invoker: C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\jbr\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\lib\idea_rt.jar=51345:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: ulpgc.bd.MatrixMultiplicationBenchmarking.classExact
# Parameters: (n = 512)

# Run progress: 50,00% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 167,202 ms/op
# Warmup Iteration   2: 169,131 ms/op
# Warmup Iteration   3: 191,623 ms/op
Iteration   1: 185,441 ms/op
Iteration   2: 181,296 ms/op
Iteration   3: 174,210 ms/op
Iteration   4: 175,533 ms/op
Iteration   5: 184,601 ms/op


Result "ulpgc.bd.MatrixMultiplicationBenchmarking.classExact":
  N = 5
  mean =    180,216 ±(99.9%) 19,795 ms/op

  Histogram, ms/op:
    [170,000, 171,250) = 0 
    [171,250, 172,500) = 0 
    [172,500, 173,750) = 0 
    [173,750, 175,000) = 1 
    [175,000, 176,250) = 1 
    [176,250, 177,500) = 0 
    [177,500, 178,750) = 0 
    [178,750, 180,000) = 0 
    [180,000, 181,250) = 0 
    [181,250, 182,500) = 1 
    [182,500, 183,750) = 0 
    [183,750, 185,000) = 1 
    [185,000, 186,250) = 1 
    [186,250, 187,500) = 0 
    [187,500, 188,750) = 0 

  Percentiles, ms/op:
      p(0,0000) =    174,210 ms/op
     p(50,0000) =    181,296 ms/op
     p(90,0000) =    185,441 ms/op
     p(95,0000) =    185,441 ms/op
     p(99,0000) =    185,441 ms/op
     p(99,9000) =    185,441 ms/op
     p(99,9900) =    185,441 ms/op
     p(99,9990) =    185,441 ms/op
     p(99,9999) =    185,441 ms/op
    p(100,0000) =    185,441 ms/op


# JMH version: 1.35
# VM version: JDK 21.0.5, OpenJDK 64-Bit Server VM, 21.0.5+13-b509.30
# VM invoker: C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\jbr\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\lib\idea_rt.jar=51345:C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.1\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: ulpgc.bd.MatrixMultiplicationBenchmarking.classExact
# Parameters: (n = 1024)

# Run progress: 75,00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 4873,627 ms/op
# Warmup Iteration   2: 4957,554 ms/op
# Warmup Iteration   3: 4266,286 ms/op
Iteration   1: 4538,279 ms/op
Iteration   2: 7277,941 ms/op
Iteration   3: 5916,008 ms/op
Iteration   4: 5122,526 ms/op
Iteration   5: 4514,370 ms/op


Result "ulpgc.bd.MatrixMultiplicationBenchmarking.classExact":
  N = 5
  mean =   5473,825 ±(99.9%) 4461,421 ms/op

  Histogram, ms/op:
    [4000,000, 4250,000) = 0 
    [4250,000, 4500,000) = 0 
    [4500,000, 4750,000) = 2 
    [4750,000, 5000,000) = 0 
    [5000,000, 5250,000) = 1 
    [5250,000, 5500,000) = 0 
    [5500,000, 5750,000) = 0 
    [5750,000, 6000,000) = 1 
    [6000,000, 6250,000) = 0 
    [6250,000, 6500,000) = 0 
    [6500,000, 6750,000) = 0 
    [6750,000, 7000,000) = 0 
    [7000,000, 7250,000) = 0 
    [7250,000, 7500,000) = 1 
    [7500,000, 7750,000) = 0 

  Percentiles, ms/op:
      p(0,0000) =   4514,370 ms/op
     p(50,0000) =   5122,526 ms/op
     p(90,0000) =   7277,941 ms/op
     p(95,0000) =   7277,941 ms/op
     p(99,0000) =   7277,941 ms/op
     p(99,9000) =   7277,941 ms/op
     p(99,9900) =   7277,941 ms/op
     p(99,9990) =   7277,941 ms/op
     p(99,9999) =   7277,941 ms/op
    p(100,0000) =   7277,941 ms/op


# Run complete. Total time: 00:00:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                     (n)  Mode  Cnt     Score      Error  Units
MatrixMultiplicationBenchmarking.classExact   128    ss    5     2,001 ±    1,147  ms/op
MatrixMultiplicationBenchmarking.classExact   256    ss    5    14,297 ±    0,609  ms/op
MatrixMultiplicationBenchmarking.classExact   512    ss    5   180,216 ±   19,795  ms/op
MatrixMultiplicationBenchmarking.classExact  1024    ss    5  5473,825 ± 4461,421  ms/op
